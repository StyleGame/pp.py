import base64
de="aW1wb3J0IG9zLCB0aW1lCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcCAmJiBwaXAgaW5zdGFsbCByZXF1ZXN0cyAmJiBwaXAgaW5zdGFsbCBiczQnKQpvcy5zeXN0ZW0oJ2NsZWFyJykKaW1wb3J0IHJlcXVlc3RzLGpzb24scmFuZG9tLHN0cmluZyx0ZXJtY29sb3IsdGltZSxweWZpZ2xldApmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cApsb2dvPScnJwpcMDMzWzE7MzRtX19fX19fX19fX19fX18KPCBTdHlsZUdhbWUgPgogIC0tLS0tLS0tLS0KICAgIFwKICAgICBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLjo6ISEhISEhITouCiAgLiEhISEhOi4gICAgICAgICAgICAgICAgICAgICAgICAuOiEhISEhISEhISEhIQogIH5+fn4hISEhISEuICAgICAgICAgICAgICAgICAuOiEhISEhISEhIVVXV1ckJCQKICAgICAgOiQkTldYISE6ICAgICAgICAgICAuOiEhISEhIVhVV1ckJCQkJCQkJCRQCiAgICAgICQkJCQkIyNXWCE6ICAgICAgLjwhISEhVVckJCQkIiAgJCQkJCQkJCQjCiAgICAgICQkJCQkICAkJCRVWCAgIDohIVVXJCQkJCQkJCQkICAgNCQkJCQkKgogICAgICBeJCQkQiAgJCQkJFwgICAgICQkJCQkJCQkJCQkJCAgIGQkJFIiCiAgICAgICAgIiokYmQkJCQkICAgICAgICokJCQkJCQkJCQkJG8rIyIKICAgICAgICAgICAgICIiIiIgICAgICAgICAgIiIiIiIiIgogICBfX19fXyBfICAgICAgICAgXyAgICAgICBfX19fXwogIC8gX19fX3wgfCAgICAgICB8IHwgICAgIC8gX19fX3wKIHwgKF9fXyB8IHxfIF8gICBffCB8IF9fX3wgfCAgX18gIF9fIF8gXyBfXyBfX18gICBfX18KICBcX19fIFx8IF9ffCB8IHwgfCB8LyBfIFwgfCB8XyB8LyBfYCB8ICBfIGAgXyBcIC8gXyBcCiAgX19fXykgfCB8X3wgfF98IHwgfCAgX18vIHxfX3wgfCAoX3wgfCB8IHwgfCB8IHwgIF9fLwogfF9fX19fLyBcX198XF9fLCB8X3xcX19ffFxfX19fX3xcX18sX3xffCB8X3wgfF98XF9fX3wKICAgICAgICAgICAgICBfXy8gfAogICAgICAgICAgICAgfF9fXy8KICAgICAgICAgICAgIAogICAgICAgICAgXDAzM1sxOzM3bSgnZm9sbG93IG15IG9uIHRsZWdyYW0gQFN0eWxlR2FtZTEnKQonJycKcHJpbnQobG9nbykKCmRlcyA9ICIiIlx4MWJbMDszMm1XZWxjb21lIFRvIFNjcmlwdCBWb2RhZm9uZSAyMDAgTUIgICIiIgpwcmludChkZXMpCnByaW50KCkKbnVtYmVyID0gaW5wdXQoIiBceDFiWzA7MzNtRW50ZXIgeW91ciBudW1iZXI6ICIpLnN0cmlwKCkKcHJpbnQoKQpwd2QgPSBpbnB1dCgiXHgxYlswOzMzbSBFbnRlciB5b3VyIHBhc3N3b3JkOiAiKS5zdHJpcCgpCnByaW50KCkKd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgcmVxOgogICAgZGVmIGdlbmVyYXRpb25MaW5rKHN0cmluZ0xpbmd0aCk6CiAgICAgICAgbGF0dGVycyA9IHN0cmluZy5hc2NpaV9sb3dlcmNhc2UKICAgICAgICByZXR1cm4gJycuam9pbihyYW5kb20uY2hvaWNlKGxhdHRlcnMpIGZvciBpIGluIHJhbmdlKHN0cmluZ0xpbmd0aCkpCiAgICB1cmxMb2dpblBhZ2UgPSBmJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZy9hdXRoL3JlYWxtcy92Zi1yZWFsbS9wcm90b2NvbC9vcGVuaWQtY29ubmVjdC9hdXRoP2NsaWVudF9pZD13ZWJzaXRlJnJlZGlyZWN0X3VyaT1odHRwcyUzQSUyRiUyRndlYi52b2RhZm9uZS5jb20uZWclMkZhciUyRktDbG9naW4mc3RhdGU9Mjg2ZDEyMTctZGIxNC00ODQ2LTg2YzEtOTUzOWJlZWEwMWVkJnJlc3BvbnNlX21vZGU9cXVlcnkmcmVzcG9uc2VfdHlwZT1jb2RlJnNjb3BlPW9wZW5pZCZub25jZT17Z2VuZXJhdGlvbkxpbmsoMTApfSZrY19sb2NhbGU9ZW4nCiAgICByZXNwb25zZVBhZ2VMb2dpbiA9IHJlcS5nZXQodXJsTG9naW5QYWdlKQogICAgc291cCA9IEJlYXV0aWZ1bFNvdXAocmVzcG9uc2VQYWdlTG9naW4uY29udGVudCwgJ2h0bWwucGFyc2VyJykKICAgIGdldFVybEFjdGlvbiA9IHNvdXAuZmluZCgnZm9ybScpLmdldCgnYWN0aW9uJykKICAgICMgcHJpbnQoZ2V0VXJsQWN0aW9uKQogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGhlYWRlclJlcXVlc3QgPSB7CiAgICAnQWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjknLAogICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlLCBicicsCiAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLUdCLGVuO3E9MC45LGFyO3E9MC44LGFyLUVHO3E9MC43LGVuLVVTO3E9MC42JywKICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgJ0hvc3QnOiAnd2ViLnZvZGFmb25lLmNvbS5lZycsCiAgICAnT3JpZ2luJzogJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZycsCiAgICAnUmVmZXJlcic6IHVybExvZ2luUGFnZSwKICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MS4wLjQwNDQuMTM4IFNhZmFyaS81MzcuMzYnCiAgICB9CiAgICBmb3JtRGF0YSA9IHsKICAgICd1c2VybmFtZSc6bnVtYmVyLAogICAgJ3Bhc3N3b3JkJzpwd2QKICAgIH0KICAgIHNlbmRVc2VyRGF0YSA9IHJlcS5wb3N0KGdldFVybEFjdGlvbixoZWFkZXJzPWhlYWRlclJlcXVlc3QsZGF0YT1mb3JtRGF0YSkKICAgIGNoZWNrUmVnaXN0cnkgPSBzZW5kVXNlckRhdGEudXJsCiAgICBfY2hlY2tSZWdpc3RyeSA9IGNoZWNrUmVnaXN0cnkuZmluZCgnS0Nsb2dpbicpCiAgICAjIFsyXSBDaGVjayB0aGUgcmVnaXN0cnkKICAgIGlmIF9jaGVja1JlZ2lzdHJ5ICE9IC0xOgogICAgICAgIGNvZGUgPSBjaGVja1JlZ2lzdHJ5CiAgICAgICAgX2NvZGUgPSBjb2RlW2NvZGUuaW5kZXgoJ2NvZGU9JykgKyA1Ol0KICAgICAgICBoZWFkZXJBY2Nlc3NUb2tlbiA9IHsKICAgICAgICAnQWNjZXB0JzogJyovKicsCiAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlLCBicicsCiAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1HQixlbjtxPTAuOSxhcjtxPTAuOCxhci1FRztxPTAuNyxlbi1VUztxPTAuNicsCiAgICAgICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsCiAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICdIb3N0JzogJ3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgICAgICdPcmlnaW4nOiAnaHR0cHM6Ly93ZWIudm9kYWZvbmUuY29tLmVnJywKICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXIvS0Nsb2dpbicsCiAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgxLjAuNDA0NC4xMzggU2FmYXJpLzUzNy4zNicKICAgICAgICB9CiAgICAgICAgZm9ybURhdGFBY2Nlc3NUb2tlbiA9IHsKICAgICAgICAnY29kZSc6IF9jb2RlLAogICAgICAgICdncmFudF90eXBlJzogJ2F1dGhvcml6YXRpb25fY29kZScsCiAgICAgICAgJ2NsaWVudF9pZCc6ICd3ZWJzaXRlJywKICAgICAgICAncmVkaXJlY3RfdXJpJzogJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZy9hci9LQ2xvZ2luJwogICAgICAgIH0KICAgICAgICBzZW5kRGF0YUFjY2Vzc1Rva2VuID0gcmVxLnBvc3QoJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZy9hdXRoL3JlYWxtcy92Zi1yZWFsbS9wcm90b2NvbC9vcGVuaWQtY29ubmVjdC90b2tlbicsaGVhZGVycz1oZWFkZXJBY2Nlc3NUb2tlbixkYXRhPWZvcm1EYXRhQWNjZXNzVG9rZW4pCmp3dCA9IHNlbmREYXRhQWNjZXNzVG9rZW4uanNvbigpWydhY2Nlc3NfdG9rZW4nXQp1cmw9Imh0dHBzOi8vbW9iaWxlLnZvZGFmb25lLmNvbS5lZzo0NDMvbW9iaWxlLWFwcC9wcm9tby91bmlmaWVkUmVkZWVtUHJvbW8iCmhlYWRlcnM9eyJBdXRob3JpemF0aW9uIjogIkJlYXJlciAiKyhqd3QpKyIiLCAib3BlcmF0aW5nU3lzdGVtIjogIlYxMS4wLjguMC5QQ09NSVhNIiwgInBsYXRmb3JtIjogIkFuZHJvaWQiLCAiZGV2aWNlVHlwZSI6ICJnaW5rZ28iLCAiYnVpbGROdW1iZXIiOiAiNDE0IiwKIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04IiwgIkNvbm5lY3Rpb24iOiAiY2xvc2UiLCAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLCAiVXNlci1BZ2VudCI6ICJva2h0dHAvMy4xMi4xIn0KanNvbj17ImNoYW5uZWxJZCI6IDMsICJjb250ZXh0dWFsT3BlcmF0aW9uSWQiOiAwLCAiY29udGV4dHVhbFByb21vSWQiOiAwLCAib3BlcmF0aW9uSWQiOiAwLCAicGFyYW0xIjogIk0ydWU5OTdHIiwgInByb21vSWQiOiAzMzM2LCAidHJpZ2dlcklkIjogMzMyLCAidHJpZ2dlclR5cGUiOiAiNiIsICJ3bGlzdElkIjogMzI1Nn0Kcj1yZXF1ZXN0cy5wb3N0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBqc29uPWpzb24pCmc9ci5qc29uKClbJ2dpZnRRdW90YSddCnByaW50KCIiKQppZiBnID09ICIyMDAiOgogICAgcHJpbnQoItiq2YXYqiDYp9mE2KfYttin2YHYqSDYqNmG2KzYp9itIikKZWxzZToKCQlwcmludCgi2K3Yp9mI2YQg2KrYp9mG2Yog2KjZg9ix2Kkg2K/YpyDZg9mE2KfZhSDYp9mE2LTYsdmD2KkiKQ=="
x=base64.b64decode(de)
d=x.decode("utf-8")

g=compile(d,"","exec")
exec(g)
